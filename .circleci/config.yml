version: 2.1

define:
  &images [
    factorio-base,
    gmod-base,
    minecraft-paper-base,
    palworld-base,
    project-zomboid-base,
    satisfactory-base,
    sdtd-base,
    sdtd-a19,
    sdtd-a21,
    # l4d2-base,
    # l4d2-8coop,
  ]

executors:
  docker-game-publisher:
    machine: true
    resource_class: joshhsoj1902/ubuntu
    environment:
      IMAGE_NAME: joshhsoj1902/docker-linuxgsm-images
  docker-scripts-publisher:
    resource_class: "small"
    environment:
      IMAGE_NAME: joshhsoj1902/docker-linuxgsm-scripts
    docker:
      - image: joshhsoj1902/circleci-build-image:latest
  docker-cimg:
    machine: true
    resource_class: joshhsoj1902/ubuntu

jobs:
  ####################################
  # Shared scripts image build steps #
  ####################################

  build-docker-scripts:
    executor: docker-scripts-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build image"
          command: |
            pwd
            ls -ltr
            cd scripts
            pwd
            ls -ltr
            make build
      - run:
          name: "Test image"
          command: |
            cd scripts
            make test
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-docker-scripts-latest:
    executor: docker-scripts-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  publish-docker-scripts-tag:
    executor: docker-scripts-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build image"
          command: |
            cd scripts
            docker pull $IMAGE_NAME:latest
            make build
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  ###################################
  # linuxgsm game image build steps #
  ###################################
  build-docker-game:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - checkout
      - run:
          name: "Build image"
          command: |
            IMAGE_DIR=<< parameters.dir >> ./do build

  test-docker-game:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - checkout
      - run: npm install gamedig -g
      - run: mkdir -p rendered_serverconfig
      - run:
          name: "Start & Test image"
          command: |
            IMAGE_DIR=<< parameters.dir >> ./do test
      - store_artifacts:
          path: rendered_serverconfig
      - run:
          name: "Cleanup"
          command: docker compose -f images/<< parameters.dir >>/.tests/docker-compose.yml down
          when: always

  publish-docker-game-latest:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}-<< parameters.dir >>"
            docker tag $IMAGE_NAME:latest-<< parameters.dir >> $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest-<< parameters.dir >>
            docker push $IMAGE_NAME:$IMAGE_TAG
  publish-docker-game-tag:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest-<< parameters.dir >> $IMAGE_NAME:$IMAGE_TAG-<< parameters.dir >>
            docker push $IMAGE_NAME:$IMAGE_TAG-<< parameters.dir >>
  # check-sdtd-config:
  #   executor: docker-cimg
  #   steps:
  #     - run: mkdir -p /tmp/serverconfig
  #     - run:
  #         name: install Gomplate
  #         command: |
  #           curl -o ~/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/v3.11.6/gomplate_linux-amd64-slim
  #           chmod 755 ~/gomplate
  #     - checkout
  #     - run:
  #         name: Download current LGSM serverconfig
  #         command: wget -O /tmp/serverconfig/lgsm-serverconfig.xml https://raw.githubusercontent.com/GameServerManagers/Game-Server-Configs/main/sdtd/serverconfig.xml
  #     - run:
  #         name: Render default serverconfig
  #         command: ~/gomplate -f images/sdtd-base/layers/001-base/serverfiles/sdtdserver.xml.gomplate -o /tmp/serverconfig/gomplate-serverconfig.xml
  #     - store_artifacts:
  #         path: /tmp/serverconfig
  #     - run:
  #         name: Diff two configs
  #         command:

workflows:
  ####################################
  # Shared scripts image build steps #
  ####################################

  build-scripts:
    jobs:
      - build-docker-scripts
      - publish-docker-scripts-latest:
          requires:
            - build-docker-scripts
          filters:
            branches:
              only: main
      - publish-docker-scripts-tag:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  ###################################
  # linuxgsm game image build steps #
  ###################################
  build-games:
    jobs:
      - build-docker-game:
          name: build << matrix.dir >>
          matrix:
            parameters:
              dir: *images
      - test-docker-game:
          name: test << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - build << matrix.dir >>
      - publish-docker-game-latest:
          name: publish latest << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - test << matrix.dir >>
          filters:
            branches:
              only: main
  tag-game-releases:
    jobs:
      - build-docker-game:
          name: build << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-docker-game:
          name: test << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - build << matrix.dir >>
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-docker-game-tag:
          name: publish tag << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - test << matrix.dir >>
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  # checks:
  #   jobs:
  #     - check-sdtd-config
