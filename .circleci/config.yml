version: 2.1

define:
  &images [
    factorio-base,
    gmod-base,
    minecraft-paper-base,
    # project-zombiod-base,
    satisfactory-base,
    sdtd-base,
    sdtd-a19,
    l4d2-base,
  ]

executors:
  docker-game-publisher:
    machine: true
    resource_class: joshhsoj1902/ubuntu
    environment:
      IMAGE_NAME: joshhsoj1902/docker-linuxgsm-images
  docker-scripts-publisher:
    resource_class: "small"
    environment:
      IMAGE_NAME: joshhsoj1902/docker-linuxgsm-scripts
    docker:
      - image: joshhsoj1902/circleci-build-image:latest
  docker-cimg:
    machine: true
    resource_class: joshhsoj1902/ubuntu

jobs:
  ####################################
  # Shared scripts image build steps #
  ####################################

  build-docker-scripts:
    executor: docker-scripts-publisher
    working_directory: "~/project/scripts"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build image"
          command: |
            make build
      - run:
          name: "Test image"
          command: |
            make test
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-docker-scripts-latest:
    executor: docker-scripts-publisher
    working_directory: "~/project/scripts"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  publish-docker-scripts-tag:
    executor: docker-scripts-publisher
    working_directory: "~/project/scripts"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build image"
          command: |
            docker pull $IMAGE_NAME:latest
            make build
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  ###################################
  # linuxgsm game image build steps #
  ###################################
  build-docker-game:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - checkout
      - run:
          name: "Build image"
          command: |
            docker build -f images/<< parameters.dir >>/Dockerfile -t $IMAGE_NAME:latest-<< parameters.dir >> images/<< parameters.dir >>

  test-docker-game:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - checkout
      - run: mkdir -p rendered_serverconfig
      - run:
          name: "Start & Test image"
          command: |
            HOST_IP=`hostname -I | awk '{print $1}'`
            # npm install gamedig -g
            docker compose -f images/<< parameters.dir >>/.tests/docker-compose.yml up -d

            sleep 10

            x=1
            while [ $x -le 60 ]
            do
              echo "Testing Gameserver. iteration $x"

              GAMENAME=`./images/<< parameters.dir >>/.tests/gamedig.sh $HOST_IP | jq -r .name`
              if [ "$GAMENAME" = "LinuxGSM" ];
              then
                echo "Gameserver is healthy."
                break
              else
                echo "($GAMENAME) != (LinuxGSM)"
                ./images/<< parameters.dir >>/.tests/gamedig.sh $HOST_IP
              fi

              x=$(( $x + 1 ))
              sleep 10
            done

            echo "v=========================v"
            docker compose -f images/<< parameters.dir >>/.tests/docker-compose.yml logs --tail 25
            echo "^=========================^"

            if [ $x -ge 60 ];
            then
              echo "================================="
              echo "GAMESERVER DIDN'T START PROPERLY."
              echo "Running other tests anyway".
              echo "================================="
            fi

            echo "Gameserver is ready. Running tests"

            if [ -d "images/<< parameters.dir >>/.tests/scripts/local" ]; then
              echo "Local tests found"

              for f in images/<< parameters.dir >>/.tests/scripts/local/*.sh; do
                if ! bash "$f"
                then
                  echo "Test Failed \"$f\""
                  exit 1
                fi
              done
            fi

            if [ -d "images/<< parameters.dir >>/.tests/scripts/docker" ]; then
              echo "Docker tests found"

              for f in images/<< parameters.dir >>/.tests/scripts/docker/*.sh; do

                base_name=$(basename ${f})
                docker compose -f images/<< parameters.dir >>/.tests/docker-compose.yml cp $f linuxgsm:/tmp/

                if ! docker compose -f images/<< parameters.dir >>/.tests/docker-compose.yml exec linuxgsm bash /tmp/$base_name
                then
                  echo "Test Failed \"$f\""
                  exit 1
                fi
              done
            fi

            if [ $x -ge 60 ];
            then
              echo "Exit with failure because server never started."
              exit 1
            fi

      - store_artifacts:
          path: rendered_serverconfig
      - run:
          name: "Cleanup"
          command: docker compose -f images/<< parameters.dir >>/.tests/docker-compose.yml down
          when: always

  publish-docker-game-latest:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}-<< parameters.dir >>"
            docker tag $IMAGE_NAME:latest-<< parameters.dir >> $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest-<< parameters.dir >>
            docker push $IMAGE_NAME:$IMAGE_TAG
  publish-docker-game-tag:
    parameters:
      dir:
        type: string
    executor: docker-game-publisher
    steps:
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest-<< parameters.dir >> $IMAGE_NAME:$IMAGE_TAG-<< parameters.dir >>
            docker push $IMAGE_NAME:$IMAGE_TAG-<< parameters.dir >>
  # check-sdtd-config:
  #   executor: docker-cimg
  #   steps:
  #     - run: mkdir -p /tmp/serverconfig
  #     - run:
  #         name: install Gomplate
  #         command: |
  #           curl -o ~/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/v3.11.6/gomplate_linux-amd64-slim
  #           chmod 755 ~/gomplate
  #     - checkout
  #     - run:
  #         name: Download current LGSM serverconfig
  #         command: wget -O /tmp/serverconfig/lgsm-serverconfig.xml https://raw.githubusercontent.com/GameServerManagers/Game-Server-Configs/main/sdtd/serverconfig.xml
  #     - run:
  #         name: Render default serverconfig
  #         command: ~/gomplate -f images/sdtd-base/layers/001-base/serverfiles/sdtdserver.xml.gomplate -o /tmp/serverconfig/gomplate-serverconfig.xml
  #     - store_artifacts:
  #         path: /tmp/serverconfig
  #     - run:
  #         name: Diff two configs
  #         command:

workflows:
  ####################################
  # Shared scripts image build steps #
  ####################################

  build:
    jobs:
      - build-docker-scripts
      - publish-docker-scripts-latest:
          requires:
            - build-docker-scripts
          filters:
            branches:
              only: main
      - publish-docker-scripts-tag:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  ###################################
  # linuxgsm game image build steps #
  ###################################
  build-games:
    jobs:
      - build-docker-game:
          name: build << matrix.dir >>
          matrix:
            parameters:
              dir: *images
      - test-docker-game:
          name: test << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - build << matrix.dir >>
      - publish-docker-game-latest:
          name: publish latest << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - test << matrix.dir >>
          filters:
            branches:
              only: main
  tag-game-releases:
    jobs:
      - build-docker-game:
          name: build << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-docker-game:
          name: test << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - build << matrix.dir >>
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-docker-game-tag:
          name: publish tag << matrix.dir >>
          matrix:
            parameters:
              dir: *images
          requires:
            - test << matrix.dir >>
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  # checks:
  #   jobs:
  #     - check-sdtd-config
